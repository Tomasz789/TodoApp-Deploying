@using ToDoList.WebApp.Models.ViewModels.BudgetViewModels
@model BudgetSummaryViewModel

<div class="container">
    <div class="d-flex d-inline-flex m-2 align-content-center">
        <partial name="AddExpense" model="new ExpenseViewModel()" />
        <partial name="AddIncome" model="new IncomeViewModel()" />
    </div>
    <div>
        <h1>Budget summary (PLN)</h1>
        <form method="post">
            <input type="submit" class="btn btn-success" asp-action="Report" asp-controller="Budget"  value ="report"/>
        </form>
        <br />
        <h2>Total incomes</h2>
        <table class="table table-striped col-12 text-center">
            <thead>
                <tr>
                    <th>Week</th>
                    <th>Month</th>
                    <th>Year</th>
                </tr>
            </thead>
            <tr>
                <td>@Model.TotalIncomesCurrentWeek</td>
                <td>@Model.TotalIncomesCurrentMonth</td>
                <td>@Model.TotalIncomesCurrentYear</td>
            </tr>
        </table>

        <h2>Total expenses</h2>
        <table class="table table-striped col-12 text-center">
            <thead>
                <tr>
                    <th>Week</th>
                    <th>Month</th>
                    <th>Year</th>
                </tr>
            </thead>
            <tr>
                <td>@Model.TotalExpensesCurrentWeek</td>
                <td>@Model.TotalExpensesCurrentMonth</td>
                <td>@Model.TotalExpensesCurrentYear</td>
            </tr>
        </table>
        <div id="budgetPieChart" style="width:500px; height:500px"></div>
        <div id="budgetDonutChart" style="width:500px; height:500px"></div>
        <div id="linearChart" style="width:500px; height:500px"></div>
   </div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
        google.charts.load('current', {'packages':['corechart']});
        google.charts.load('current',{'packages':['line']});
        google.charts.setOnLoadCallback(drawChart);

        function drawChart(){
            var data = google.visualization.arrayToDataTable([
                ['Budget', 'Price'],
                ['Incomes',  parseInt(@Model.TotalIncomesCurrentMonth)], 
                ['Expenses',parseInt(@Model.TotalExpensesCurrentMonth)], 
            ]
        );

        var options = {title: 'Incomes and Expenses', width:'90%', height:'100%', chartArea: {width: '500px', height: '500px'}};
        var chart = new google.visualization.PieChart(document.getElementById('budgetPieChart'));
        chart.draw(data, options);
    }

    function drawDonutChartForWeek(){
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Budget');
            data.addColumn('number', 'Value');
            data.addRows([
                ['Incomes', parseInt(@Model.TotalIncomesCurrentWeek)],
                ['Expenses', parseInt(@Model.TotalExpensesCurrentWeek)]
            ]);

            var donutChartOpts = {
            'title':'Incomes and Expenses - this week',
            'width':'500px',
            'height':'500px',
         };

        var donutChart = new google.visualization.PieChart(document.getElementById('budgetDonutChart'));
        donutChart.draw(data, donutChartOpts);
     }
     function drawLinearChart(){
             var data = new google.visualization.DataTable();
             data.addColumn('string','Month');
             data.addColumn('number', 'Income value PLN');
            // data.addColumn('number', 'Expense value PLN');

             data.addRows([
                 ['Jan', @Model.Incomes.Where(x => x.CreatedAt.Month == 1).Sum(x => x.IncomeValue)],
                 ['Feb', @Model.Incomes.Where(x => x.CreatedAt.Month == 2).Sum(x => x.IncomeValue)],
                 ['Mar', @Model.Incomes.Where(x => x.CreatedAt.Month == 3).Sum(x => x.IncomeValue)],
                 ['Apr', @Model.Incomes.Where(x => x.CreatedAt.Month == 4).Sum(x => x.IncomeValue)],
                 ['May', @Model.Incomes.Where(x => x.CreatedAt.Month == 5).Sum(x => x.IncomeValue)],
                 ['Jun', @Model.Incomes.Where(x => x.CreatedAt.Month == 6).Sum(x => x.IncomeValue)],
                 ['Jul', @Model.Incomes.Where(x => x.CreatedAt.Month == 7).Sum(x => x.IncomeValue)],
                 ['Aug', @Model.Incomes.Where(x => x.CreatedAt.Month == 8).Sum(x => x.IncomeValue)],
                 ['Sep', @Model.Incomes.Where(x => x.CreatedAt.Month == 9).Sum(x => x.IncomeValue)],
                /* ['Oct', @Model.Incomes.Where(x => x.CreatedAt.Month == 10).Sum(x => x.IncomeValue)]*/
             ]);
           var opts = {
                   chart:{
                       title: 'Annual incomes and expenses',
                       
                   },
                   width: 500,
                   height: 500
               
           };
           var chart = new google.charts.Line(document.getElementById('linearChart'));
           chart.draw(data, google.charts.Line.convertOptions(opts));

       }
     google.charts.setOnLoadCallback(drawDonutChartForWeek);
     google.charts.setOnLoadCallback(drawLinearChart);
</script>